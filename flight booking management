import tkinter as tk
from tkinter import messagebox, ttk 
import mysql.connector
from datetime import datetime
from openpyxl import Workbook, load_workbook 
import os
# DATABASE SETUP
conn = mysql.connector.connect( 
host="localhost",
user="root",
password="Rida.arshad@2004", # <-- Your MySQL password 
database="airline_db" # <-- Make sure this DB exists
)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS flights (
id INT AUTO_INCREMENT PRIMARY KEY,
flight_no VARCHAR(50), 
destination VARCHAR(100), 
departure_time VARCHAR(50)
) 
""")
# Create Passengers table
cur.execute("""
CREATE TABLE IF NOT EXISTS passengers ( 
id INT AUTO_INCREMENT PRIMARY KEY, 
name VARCHAR(100),
passport_no VARCHAR(50) UNIQUE
) 
""")
# Create Bookings table
cur.execute("""
CREATE TABLE IF NOT EXISTS bookings (
id INT AUTO_INCREMENT PRIMARY KEY,
passenger_id INT, 
flight_id INT,
FOREIGN KEY(passenger_id) REFERENCES passengers(id) ON DELETE CASCADE, 
FOREIGN KEY(flight_id) REFERENCES flights(id) ON DELETE CASCADE
) 
""")
conn.commit()
# ------------------ EXCEL EXPORT HELPERS ------------------
def export_flight_to_excel(flight_no, destination, departure): 
file = "flights.xlsx"
if os.path.exists(file):
wb = load_workbook(file) 
ws = wb.active
else:
wb = Workbook() 
ws = wb.active
ws.append(["Flight No", "Destination", "Departure Time"])
ws.append([flight_no, destination, departure])
wb.save(file)
def export_passenger_to_excel(name, passport_no): 
file = "passengers.xlsx"
if os.path.exists(file):
wb = load_workbook(file) 
ws = wb.active
else:
wb = Workbook() 
ws = wb.active
ws.append(["Name", "Passport No"]) 
ws.append([name, passport_no]) 
wb.save(file)
def export_booking_to_excel(passenger_name, passport_no, flight_no): 
file = "bookings.xlsx"
if os.path.exists(file):
wb = load_workbook(file) 
ws = wb.active
else:
wb = Workbook() 
ws = wb.active
ws.append(["Passenger Name", "Passport No", "Flight No"]) 
ws.append([passenger_name, passport_no, flight_no]) 
wb.save(file)
# VALIDATION
def is_future_datetime(date_str): 
try:
dep_time = datetime.strptime(date_str, "%Y-%m-%d %H:%M") 
return dep_time > datetime.now()
except ValueError: 
return False
# FLIGHT FUNCTIONS
def add_flight():
flight_no = entry_flight_no.get() 
dest = entry_destination.get() 
depart = entry_departure.get()
if not (flight_no and dest and depart): 
messagebox.showerror("Error", "All flight fields are required.") 
return
if not is_future_datetime(depart):
messagebox.showerror("Error", "Departure must be in the future (format: YYYY-MMDD HH:MM)")
return
cur.execute("INSERT INTO flights (flight_no, destination, departure_time) VALUES (%s,
%s, %s)",
(flight_no, dest, depart)) 
conn.commit() 
export_flight_to_excel(flight_no, dest, depart)
messagebox.showinfo("Added", "Flight added successfully.") 
load_flights()
def load_flights(): 
list_flights.delete(*list_flights.get_children()) 
cur.execute("SELECT * FROM flights")
for row in cur.fetchall(): 
list_flights.insert('', 'end', values=row)
def delete_flight():
selected = list_flights.selection() 
if selected:
flight_id = list_flights.item(selected[0])['values'][0]
cur.execute("DELETE FROM bookings WHERE flight_id = %s", (flight_id,)) 
cur.execute("DELETE FROM flights WHERE id = %s", (flight_id,)) 
conn.commit()
messagebox.showinfo("Deleted", "Flight and related bookings deleted.") 
load_flights()
# ------------------ PASSENGER FUNCTIONS ------------------
def add_passenger():
name = entry_passenger_name.get() 
passport = entry_passenger_passport.get() 
if not (name and passport):
messagebox.showerror("Error", "Passenger fields are required.") 
return
try:
cur.execute("INSERT INTO passengers (name, passport_no) VALUES (%s, %s)",
(name, passport))
conn.commit() 
export_passenger_to_excel(name, passport)
messagebox.showinfo("Added", "Passenger added.") 
load_passengers()
except mysql.connector.IntegrityError:
messagebox.showerror("Error", "Passport number must be unique.")
def load_passengers(): 
list_passengers.delete(*list_passengers.get_children()) 
cur.execute("SELECT * FROM passengers")
for row in cur.fetchall(): 
list_passengers.insert('', 'end', values=row)
def delete_passenger():
selected = list_passengers.selection() 
if selected:
pid = list_passengers.item(selected[0])['values'][0] 
cur.execute("DELETE FROM passengers WHERE id = %s", (pid,))
conn.commit()
messagebox.showinfo("Deleted", "Passenger deleted.") 
load_passengers()
# BOOKING FUNCTIONS
def book_flight():
selected_passenger = list_passengers.selection() 
selected_flight = list_flights.selection()
if not selected_passenger or not selected_flight: 
messagebox.showerror("Error", "Select both a passenger and a flight.") 
return
pid = list_passengers.item(selected_passenger[0])['values'][0] 
fid = list_flights.item(selected_flight[0])['values'][0]
cur.execute("SELECT name, passport_no FROM passengers WHERE id = %s", (pid,)) 
pname, ppassport = cur.fetchone()
cur.execute("SELECT flight_no FROM flights WHERE id = %s", (fid,)) 
fno = cur.fetchone()[0]
cur.execute("INSERT INTO bookings (passenger_id, flight_id) VALUES (%s, %s)", (pid, 
fid))
conn.commit()
export_booking_to_excel(pname, ppassport, fno) 
messagebox.showinfo("Success", "Flight booked successfully.")
# UI SETUP
root = tk.Tk()
root.title("Airline Management System") 
tabControl = ttk.Notebook(root) 
tab_flights = ttk.Frame(tabControl) 
tab_passengers = ttk.Frame(tabControl) 
tabControl.add(tab_flights, text='Flights')
tabControl.add(tab_passengers, text='Passengers') 
tabControl.pack(expand=1, fill='both')
# Flights Tab
tk.Label(tab_flights, text="Flight No").grid(row=0, column=0) 
entry_flight_no = tk.Entry(tab_flights) 
entry_flight_no.grid(row=0, column=1)
tk.Label(tab_flights, text="Destination").grid(row=1, column=0)
entry_destination = tk.Entry(tab_flights) 
entry_destination.grid(row=1, column=1)
tk.Label(tab_flights, text="Departure (YYYY-MM-DD HH:MM)").grid(row=2, column=0) 
entry_departure = tk.Entry(tab_flights)
entry_departure.grid(row=2, column=1)
tk.Button(tab_flights, text="Add Flight", command=add_flight).grid(row=3, column=0) 
tk.Button(tab_flights, text="Delete Flight", command=delete_flight).grid(row=3, column=1) 
cols = ('ID', 'Flight No', 'Destination', 'Departure')
list_flights = ttk.Treeview(tab_flights, columns=cols, show='headings') 
for col in cols:
list_flights.heading(col, text=col)
list_flights.grid(row=4, column=0, columnspan=3, pady=10)
# Passengers Tab
tk.Label(tab_passengers, text="Name").grid(row=0, column=0) 
entry_passenger_name = tk.Entry(tab_passengers) 
entry_passenger_name.grid(row=0, column=1) 
tk.Label(tab_passengers, text="Passport No").grid(row=1, column=0) 
entry_passenger_passport = tk.Entry(tab_passengers) 
entry_passenger_passport.grid(row=1, column=1)
tk.Button(tab_passengers, text="Add Passenger", command=add_passenger).grid(row=2, 
column=0)
tk.Button(tab_passengers, text="Delete Passenger", command=delete_passenger).grid(row=2, 
column=1)
cols2 = ('ID', 'Name', 'Passport No')
list_passengers = ttk.Treeview(tab_passengers, columns=cols2, show='headings') 
for col in cols2:
list_passengers.heading(col, text=col) 
list_passengers.grid(row=3, column=0, columnspan=3, pady=10)
tk.Button(tab_passengers, text="Book Flight", command=book_flight).grid(row=4, 
column=1)
# Load initial data 
load_flights() 
load_passengers() 
root.mainloop()
